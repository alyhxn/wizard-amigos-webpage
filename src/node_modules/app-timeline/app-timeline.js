const timeline_card = require('timeline-card')
const timeline_filter = require('timeline-filter')
const year_filter = require('year-filter')
const month_filter = require('month-filter')
const scrollbar = require('scrollbar')
/******************************************************************************
  APP TIMELINE COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = app_timeline
// ----------------------------------------
function app_timeline (opts = default_opts, protocol) {
  // ----------------------------------------
  // RESOURCE POOL (can't be serialized)
  // ----------------------------------------
  const ro = new ResizeObserver(entries => {
    console.log('ResizeObserver:terminal:resize')
    // !sorting && setScrollTop(timeline_wrapper.scrollHeight)
    const scroll_channel = state.net[state.aka.scrollbar]
    scroll_channel.send({
      head: [id, scroll_channel.send.id, scroll_channel.mid++],
      refs: { },
      type: 'handle_scroll',
    })
  })
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  status.YEAR = ''
  status.MONTH = ''
  status.DATE = ''
  status.cards = []
  status.separators = []
  status.years = []
  let dates = []
  let sorting = true // latest to oldest
  let cardfilter
  let scroll_store = 0
  let card_index = 0
  let card_index_rev = 0
  let scroll_dir = true
  // ----------------------------------------
  // Local Storage
  // ----------------------------------------
  if (localStorage.getItem('visitedBefore')) {
    visitor = true // old
  } else {
    visitor = false // new
    localStorage.setItem('visitedBefore', 'true')
  }
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  // Assigning all the icons
  const { img_src: {
      icon_folder_solid= `${prefix}/icon_folder_solid.svg`,
      sort_down,
      sort_up
  } } = data

  let cards_data = require(`../data/data.json`)['timeline']
  cards_data = cards_data.map(card => {
      const date = new Date(card.date + ' ' + convert_time_format(card.time))
      if(!status.years.includes(date.getFullYear()))
        status.years.push(date.getFullYear())
      card.date_raw = date.getTime()
      card.data = data
      dates.push(card.date_raw)
      return card
    }).reverse()
    // .sort(function (a, b) {
    //   const dateA = new Date(a.date_raw)
    //   const dateB = new Date(b.date_raw)
    //   // // Compare years in ascending/descending order
    //   // if (dateA.getFullYear() !== dateB.getFullYear()) {
    //   //   return visitor ? dateB.getFullYear() - dateA.getFullYear() : dateA.getFullYear() - dateB.getFullYear()
    //   // }
    //   // If years are the same, compare dates in ascending/descending order
    //   return dateB.getTime() - dateA.getTime()
    // })
  status.years = status.years.filter((value) => {
    return !isNaN(value)
  })
  status.years_max = [...status.years]
  cardfilter = [...cards_data]
  const tags = new Set(cards_data.flatMap(card => card.tags))
  // const card_groups = []
  let year_cache, card_group, card_group_rev, prev_year
  status.YEAR = new Date(cards_data[0].date_raw).getFullYear()
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const PROTOCOL = {}
  const on = {}
  const channel = use_protocol('app_timeline')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `
  <div class="timeline_section">
    <div class="windowbar"></div>
    <div class="main_wrapper">
      <div class="filter_wrapper">
          <div class="month_wrapper">
            <div class="current_separator">
            </div>
            <div class="timeline_wrapper">
            </div>
            <div class="empty_wrapper">
              <div>
                Loading
              <div>
            </div>
          </div>
      </div>
    </div>
  </div>`
  const main_wrapper = shadow.querySelector('.main_wrapper')
  const timeline_wrapper = shadow.querySelector('.timeline_wrapper')
  const filter_wrapper = shadow.querySelector('.filter_wrapper')
  const month_wrapper = shadow.querySelector('.month_wrapper')
  const empty_wrapper = shadow.querySelector('.empty_wrapper')
  const current_separator = shadow.querySelector('.current_separator')
  // ----------------------------------------
  const windowbar_shadow = shadow.querySelector('.windowbar').attachShadow(shopts)
  let fragment
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  let timeline_cards = []
  { // timeline cards
    const on = {}
    append_cards(0, 10)
    timeline_wrapper.onscroll = onscroll
  }
  { // timeline filter
    const on = {
      'toggle_month_filter': toggle_month_filter,
      'toggle_year_filter': toggle_year_filter,
      'value': on_value,
      'set_filter': set_filter
    }
    const protocol = use_protocol('timeline_filter')({ state, on })
    const opts = {
      data, tags: Array.from(tags),
      latest_date: cards_data[0].date_raw
    }
    const element = shadowfy()(timeline_filter(opts, protocol))
    main_wrapper.append(element)
    function on_value (message) { set_filter(message.data) }
    async function toggle_month_filter (message) {
      month_filter_wrapper.classList.toggle('show')
    }
    async function toggle_year_filter (message) {
      year_filter_wrapper.classList.toggle('hide')
    }
  }
  var year_filter_wrapper
  { // year filter
    const on = { 'set_scroll': on_set_scroll }
    const protocol =  use_protocol('year_filter')({ state, on })
    const opts = {
      data, latest_year: Math.max(...status.years), oldest_year: Math.min(...status.years), sorting
    }
    year_filter_wrapper = shadowfy()(year_filter(opts, protocol))
    filter_wrapper.append(year_filter_wrapper)
    if(screen.width < 510){
      year_filter_wrapper.classList.add('hide')
    }

    async function on_set_scroll ({ data }) {
      set_scroll(data)
      updateCalendar()
    }
  }
  year_filter_wrapper.classList.add('year_filter_wrapper')
  var month_filter_wrapper
  { // month filter
    const on = { 'set_scroll': on_set_scroll, 'set_filter': set_filter }
    const protocol = use_protocol('month_filter')({ state, on })
    const opts = { data }
    month_filter_wrapper = shadowfy()(month_filter(opts, protocol))
    month_filter_wrapper.classList.add('month_filter_wrapper')
    month_wrapper.append(month_filter_wrapper)
    async function on_set_scroll ({ data }) {
      set_scroll(data)
      updateCalendar()
    }
  }
  { // scrollbar
    const on = { 'set_scroll': on_set_scroll, status: onstatus }
    const protocol = use_protocol('scrollbar')({ state, on })
    opts.data.img_src.icon_arrow_start = opts.data.img_src.icon_arrow_up
    opts.data.img_src.icon_arrow_end = opts.data.img_src.icon_arrow_down
    const scroll_opts = { data }
    const element = shadowfy()(scrollbar(scroll_opts, protocol))
    filter_wrapper.append(element)

    const channel = state.net[state.aka.scrollbar]
    ro.observe(timeline_wrapper)
    async function on_set_scroll (message) { setScrollTop(message.data) }
    async function onstatus (message) {
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        refs: { cause: message.head },
        type: 'update_size',
        data: {
          sh: timeline_wrapper.scrollHeight,
          ch: timeline_wrapper.clientHeight,
          st: timeline_wrapper.scrollTop
        }
      })
    }
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------
  updateCalendar()
  current_separator.innerHTML = sorting ? Math.max(...status.years) : Math.min(...status.years)
  return el

  function make_card (card_data) {
    const index = scroll_dir ? card_index : card_index_rev
    const protocol = use_protocol(`card_${index}`)({ state, on })
    const opts = card_data
    const element = shadowfy()(timeline_card(opts, protocol))          
    const slice = card_data.date.slice(-4)
    // if(i === Object.keys(cards_data).length - 1){
    //   const latest = visitor ? Math.min(...status.years) : Math.max(...status.years)
    //   let oldest = Number(year_cache) - 1
      
    //   while(visitor ? latest <= oldest : latest >= oldest){
    //     const separator = document.createElement('div')
    //     separator.innerHTML = oldest
    //     separator.classList.add('separator')
    //     card_groups.push(separator)
    //     visitor ? oldest-- : oldest++
    //   }
    // }
    let scroll_index
    if(scroll_dir)
      scroll_index = index == 0 ? undefined : cardfilter[index - 1].date.slice(-4)
    else
      scroll_index = cardfilter.length == index ? undefined : cardfilter[index].date.slice(-4)

    if (scroll_index !== slice) {
      // console.error(slice, scroll_index, card_data.date, cardfilter[index].date)
      const separator = document.createElement('div')
      separator.innerHTML = slice
      separator.classList.add('separator')
      status.separators.push(separator)
      // card_groups.push(separator)
      fragment.appendChild(separator)
    
      if(scroll_dir){
        card_group = document.createElement('div')
        card_group.classList.add('card_group')
        fragment.appendChild(card_group)
      }
      else{
        card_group_rev = document.createElement('div')
        card_group_rev.classList.add('card_group')
        fragment.appendChild(card_group_rev)
      }  
      // card_groups.push(card_group)
      year_cache = slice
    }
    element.idx = index
    if(scroll_dir){
      card_group.append(element)
      card_index++
    }
    else{
      card_group_rev.prepend(element)
      card_index_rev--
    }
    return element
  }

  async function append_cards(start, end){
    scroll_dir = true
    fragment = document.createDocumentFragment()
    timeline_cards.push(...cardfilter.slice(start, end).map(make_card))
    timeline_wrapper.appendChild(fragment)
  }
  async function onscroll () {
    const timeline_top = timeline_wrapper.getBoundingClientRect().top
    const timeline_height = timeline_wrapper.scrollHeight
    const timeline_scrollTop = timeline_wrapper.scrollTop
    //Bottom is reach load more cards
    if(0 < card_index_rev && timeline_scrollTop < timeline_height/10){
      // setScrollTop(timeline_height/10)
      scroll_dir = false
      fragment = document.createDocumentFragment()
      timeline_cards.push(...cardfilter.slice(card_index_rev < 10 ? 0 : card_index_rev - 10, card_index_rev).reverse().map(make_card))
      timeline_wrapper.prepend(fragment)
    }
    else if(cardfilter.length > card_index && timeline_height < timeline_scrollTop + 1000){
      append_cards(card_index, card_index+10)
    }
  
    scroll_store = timeline_scrollTop
    const scroll_channel = state.net[state.aka.scrollbar]
    scroll_channel.send({
      head: [id, scroll_channel.send.id, scroll_channel.mid++],
      type: 'handle_scroll'
    })

    let check = true //to check if scrolling was successful using separators
    //scroll using separators as ref
    status.separators.some(separator => {
      const child_top = separator.getBoundingClientRect().top
      if (child_top && child_top >= timeline_top && child_top < timeline_top + 10) {
        const year = separator.innerHTML
        status.YEAR = year
        updateCalendar()
        const channel = state.net[state.aka.year_filter]
        channel.send({
          head: [id, channel.send.id, channel.mid++],
          type: 'update_year_filter',
          data: year
        })
        check = false
        return true
      }
    })
    //else scroll using cards as ref
    if (check)
      timeline_cards.some(card => {
        const { idx } = card
        const child_top = card.getBoundingClientRect().top
        if (child_top && child_top >= timeline_top - 180 && child_top < timeline_top + 40) {
          const year = cards_data[idx].date.slice(-4)
          status.YEAR = year
          updateCalendar()
          const channel = state.net[state.aka.year_filter]
          channel.send({
            head: [id, channel.send.id, channel.mid++],
            type: 'update_year_filter',
            data: year
          })
          return true
        }
      })
    const channel = state.net[state.aka.timeline_filter]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'update_timeline_filter',
      data: { month: status.MONTH , year: status.YEAR }
    })
    current_separator.innerHTML = status.YEAR
  }
  function convert_time_format (time) {
    let temp = time.slice(0, 2)
    if (time.includes('PM')) { temp = parseInt(temp) + 12 }
    return temp + time.slice(2, -2)
  }
  async function set_scroll (data) {
    scroll_dir = true
    //for scroll by year separators are enough
    if (data.filter === 'YEAR'){
      //loading the cards
      let scroll_index = 10
      fragment = document.createDocumentFragment()
      timeline_wrapper.innerHTML = ''
      timeline_cards = []
      status.separators = []
      card_index = Number(cardfilter[card_index].date.slice(-5)) > data.value ? card_index : 0
      for (const card_data of cardfilter.slice(card_index)){
        const temp = Number(card_data.date.slice(-5))
        if(temp <= data.value){
          scroll_dir = false
          card_index_rev = card_index
          if(card_index < 10){
            scroll_index = card_index
          }
          year_cache = cardfilter[card_index - scroll_index].date.slice(-5)
          timeline_cards.push(...cardfilter.slice(card_index - scroll_index, card_index).reverse().map(make_card))
          break
        }
        card_index++
      }
      timeline_wrapper.prepend(fragment)
      append_cards(card_index, card_index + 10)
      //scroll to the cards
      status[data.filter] = data.value
      setScrollTop(timeline_cards[scroll_index].getBoundingClientRect().top - timeline_wrapper.getBoundingClientRect().top + timeline_wrapper.scrollTop)
      current_separator.innerHTML = data.value
    }//otherwise cards are needed
    else if (data.value){
      const filter_date = new Date(data.value + ' ' + status.YEAR)
      fragment = document.createDocumentFragment()
      for (const card_data of cardfilter.slice(card_index)){
        if(new Date(card_data.date).getTime() < filter_date.getTime())
          break
        timeline_cards.push(make_card(card_data))
      }
      timeline_wrapper.appendChild(fragment)
      status[data.filter] = data.value
      let check = true
      timeline_cards.some(card => {
        const { idx } = card
        const card_data = cards_data[idx]
        if(cardfilter.includes(card_data)){
          const card_date = card_data.date

          if (card_date.includes(data.value) && card_date.includes(status.YEAR)) {
            if(check && status.cards){
              setScrollTop(card.getBoundingClientRect().top - timeline_wrapper.getBoundingClientRect().top + timeline_wrapper.scrollTop)

              check = false
              status.cards.forEach(status_card => {
                status_card.classList.remove('active')
              })
              if(status.cards[0] === card){
                status.cards = []
                return true
              }
              status.cards = []
            }
            if(data.filter === 'DATE'){
              card.classList.add('active')
              status.cards.push(card)
            }
          }
          else if(!check){
            return true
          }
        }
      })
      const timeline_channel = state.net[state.aka.timeline_filter]
      timeline_channel.send({
        head: [id, timeline_channel.send.id, timeline_channel.mid++],
        type: 'update_timeline_filter',
        data: { month: status.MONTH , year: status.YEAR }
      })
    }//otherwise it means we need to remove highlight
    else if(status.cards){
      status.cards.forEach(status_card => {
        status_card.classList.remove('active')
      })
      status.cards = []
      return
    }
    //update year_filter
    const year_channel = state.net[state.aka.year_filter]
    year_channel.send({
      head: [id, year_channel.send.id, year_channel.mid++],
      type: 'update_year_filter',
      data: status.YEAR
    })

  }
  async function setScrollTop (value) {
    timeline_wrapper.scrollTop = value
  }
  async function set_filter (data) {
    //Store filter value
    status[data.filter] = data.value
    timeline_wrapper.innerHTML = ''
    cardfilter = [...cards_data]
    //filter the json data
    if (status.SEARCH) cardfilter = cardfilter.filter((card_data) => {
      return card_data.title.toLowerCase().match(status.SEARCH.toLowerCase())
    })
    if (status.STATUS && status.STATUS !== 'ALL') cardfilter = cardfilter.filter((card_data) => {
      return card_data.active_state === status.STATUS && card_data
    })
    if (status.TAGS && status.TAGS !== 'ALL') {
      cardfilter = cardfilter.filter((card_data) => {
        return card_data.tags.includes(status.TAGS) && card_data
      })
    }
    //update timeline_cards
    card_index = 0
    year_cache = undefined
    append_cards(0, cardfilter.length < 10 ? cardfilter.length : 10)
    //Update scrollbar and calendar
    const channel = state.net[state.aka.scrollbar]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'handle_scroll'
    })
    if (!cardfilter[0]) return

    set_scroll({
      filter: 'YEAR',
      value: sorting ? Math.max(...status.years_max) : Math.min(...status.years_max)
    })
    updateCalendar(true)//boolean argument indicates that this request is coming from set_filter
  }
  async function updateCalendar (check = false) {
    let dates = []
    if (status.YEAR) cardfilter.forEach(card_data => {
      if (card_data.date.includes(status.YEAR)) dates.push(card_data.date)
    })
    const channel = state.net[state.aka.month_filter]
    if(prev_year !== String(status.YEAR) || check){
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        type: 'update_calendar',
        data: {dates, year: Number(status.YEAR)}
      })
      prev_year = String(status.YEAR).slice(0)
      if(status.cards){
        status.cards.forEach(status_card => {
          status_card.classList.remove('active')
        })
        status.cards = []
      }
    }
    
  }
}
function get_theme () {
  return`
    .timeline_section {
      display: flex;
      flex-direction: column;
    }
    .main_wrapper {
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      container-type: inline-size;
      width: 100%;
      height: 100%;
      margin-bottom: 30px;
    }
    .main_wrapper * {
      box-sizing: border-box;
    }
    .main_wrapper .filter_wrapper {
      display: flex;
      width: 100%;
      height: 100%;
      border : 2px solid var(--ac-3);
      }
    .main_wrapper .filter_wrapper .month_wrapper {
      width: 100%;
      height: 100%;
      min-height: 500px;
      overflow: hidden;
      position: relative;
      margin: 0 20px;
    }
    .main_wrapper .filter_wrapper .timeline_wrapper {
      display: flex;
      flex-direction: column;
      width: 100%;
      height: 500px;
      overflow: scroll;
      gap: 20px;
      scrollbar-width: none; /* For Firefox */
    }
    .main_wrapper .filter_wrapper .timeline_wrapper.hide {
      display: none;
    }
    .main_wrapper .filter_wrapper .empty_wrapper {
      display: none;
      position: absolute;
      width: 100%;
      height: 100%;
      justify-content: center;
      align-items: center;
      top: 0;
    }
    .main_wrapper .filter_wrapper .empty_wrapper.show {
      display: flex;
    }
    .main_wrapper .filter_wrapper .timeline_wrapper .card_group {
      width: 100%;
      padding: 0px;
      display: grid;
      gap: 20px;
      grid-template-columns: 12fr;
      border: 4px solid transparent;
    }
    .main_wrapper .filter_wrapper .timeline_wrapper .card_group > .active{
      outline: 4px solid var(--ac-1);
    }
    .main_wrapper .filter_wrapper .timeline_wrapper .card_group > .hide{
      display: none;
    }
    .main_wrapper .filter_wrapper .timeline_wrapper::-webkit-scrollbar {
      display: none;
    }
    .main_wrapper .filter_wrapper .timeline_wrapper .separator{
      background-color: var(--ac-1);
      text-align: center;
      margin: 0 4px;
      border: 1px solid var(--ac-3);
      position: relative;
      z-index: 2;
    }
    .main_wrapper .filter_wrapper > div:last-child{
      border-left: 1px solid var(--ac-3);
    }
    .main_wrapper .filter_wrapper .month_wrapper .current_separator{
      position: absolute;
      display: block;
      top: 0;
      width: calc(100% - 9px);
      background-color: var(--ac-1);
      text-align: center;
      margin: 0 4px;
      border: 1px solid var(--ac-3);
      z-index: 1;
    }
    .main_wrapper .filter_wrapper .year_filter_wrapper{
      border-left:1px solid var(--ac-3);
      padding: 1px;
    }
    .main_wrapper .filter_wrapper .year_filter_wrapper.hide{
      display: none;
    }
    .month_filter_wrapper{
      display: none;
      z-index: 2;
      height: 0;
      top: -166px;
      position: relative;
      /*border: 1px solid var(--ac-3);*/
    }
    .month_filter_wrapper.show{
      display: block;
    }
    @container(min-width: 400px) {
      .main_wrapper .filter_wrapper .timeline_wrapper .card_group:last-child,
      .main_wrapper .filter_wrapper .timeline_wrapper .separator:last-child{
        margin-bottom: 300px;
      }
    }
    @container(min-width: 768px) {
      .main_wrapper .filter_wrapper .timeline_wrapper .card_group {
        grid-template-columns: repeat(2, 6fr);
      }
    }
    @container(min-width: 1200px) {
      .main_wrapper .filter_wrapper .timeline_wrapper .card_group {
        grid-template-columns: repeat(3, 4fr);
      }
    }

  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}